#!/usr/bin/env ruby

# setup: gem install gitlab git
# usage: gitlab-merge-request
# makes a merge request for the current branch that has already been pushed
# to origin

require "gitlab"
require "git"
require "tempfile"

GITLAB_BASE_URL = ENV['GITLAB_API_ENDPOINT'].sub '/api/v3', ''
@git = Git.open(Dir.pwd)

def parse_remote_url(url)
  m = url.match(%r{:(.*)/(.*)\.git})
  { namespace: m[1], path: m[2] }
end

def find_gitlab_project(namespace, path)

  namespace = namespace.split('/').last
  #look for a group corresponding to namespace
  groups = Gitlab.group_search(namespace)

  if groups.any?
    #we find a group corresponding to "group" var
    projects = Gitlab.group_projects(groups[0].id, {per_page: 1000})
  else
    #fallback: looking for projects with corresponding namespace
    projects = Gitlab.projects({'search'=> namespace})

    if not projects.any?
      raise sprintf("Unable find project with namespace '%s' and path '%s'", namespace, path)
    end
  end

  path_with_namespace = namespace + '/' + path

  #only return the right one (same namespace and path)
  projects.detect { |proj| proj.path_with_namespace == path_with_namespace }
end

def cwd_gitlab_project
  project = parse_remote_url @git.config['remote.origin.url']
  find_gitlab_project project[:namespace], project[:path]
end

def write_merge_request_message
  last_commit_message = @git.object('HEAD').message
  Tempfile.open "merge-request-message" do |f|
    f << last_commit_message
    f.close
    system "#{ENV['EDITOR']} #{f.path}"
    f.open
    f.read
  end
end

def format_url(*args)
  "#{GITLAB_BASE_URL}/#{args.join '/'}"
end

branch_to_merge = ARGV[0]

if branch_to_merge == nil
  raise sprintf("You need to specify branch you intend to merge into")
end

current_branch = @git.branches.find(&:current).name
project = cwd_gitlab_project

puts 'Create merge request: ' + current_branch + " => " + branch_to_merge

merge_request =  Gitlab.create_merge_request project.id, write_merge_request_message,
  :source_branch => current_branch, :target_branch => v1 = branch_to_merge

puts format_url project.path_with_namespace, 'merge_requests' , merge_request.iid
